#!######################################################################
#!#                          ZSH Specific                             ##
#!######################################################################
# Treat # as a comment even in interactive shell
setopt interactivecomments

# Enable colors
autoload -Uz colors && colors

# Prompt with apple symbol, user@host, current directory, and a red arrow
PROMPT='%F{250}ï£¿%f %F{202}%n@%m%f %F{yellow}ðŸ“‚ %~%f %F{red}âžœ%f '


# Tab-completion improvements
autoload -Uz compinit && compinit

#!######################################################################
#!#                             Fastfetch                             ##
#!######################################################################
fastfetch
alias ff="fastfetch"
alias fff="fastfetch -c all.jsonc" #See every available module


#!######################################################################
#!#                            Exports                                ##
#!######################################################################

# Admin Commands: SeePath
printf "\033[0;35mAdmin Commands:\033[0m \033[0;34mSeePath\033[0m\n"

SeePath() {
    printf "%s\n" ${(s/:/)PATH}
}

# Exports
export PATH="$HOME/go/bin:$PATH"

#!######################################################################
#!#                            Updates                                ##
#!######################################################################
printf "\033[0;35mUpdates:\033[0m \033[0;34mupdatemac\033[0m\n"



updatemac() {
    sudo softwareupdate -i -a
    brew update && brew upgrade && brew upgrade --cask --greedy
    brew cleanup
    echo "âœ… macOS & Homebrew updated successfully"
}

#!###############################################################
#!#                       Edit Dotfiles                        ##
#!###############################################################
echo -e "${MAGENTA}Edit Commands:${ENDCOLOR} ${BLUE}zshrc or zshrcv${ENDCOLOR}"


alias zshrc='nano $HOME/.zshrc'
alias zshrcv='open -a TextEdit $HOME/.zshrc'

#!#############################################################################
#!#                                Misc                                      ##
#!#############################################################################


test() {
    setopt localoptions interactivecomments  # allow # comments in interactive zsh

    printf "\033[0;31m3...\033[0m\n"; sleep 1
    printf "\033[1;33m2...\033[0m\n"; sleep 1
    printf "\033[0;32m1...\033[0m\n"; sleep 1

    printf "\033[0;35mTEST\033[0m\n"

    printf "Press Enter to Exit"
    read -r
}


#Speed test
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -'

# alias to show the date
alias da='date "+%Y-%m-%d %A %T %Z"'

#todo not built yet
#alias titus=''

#!#############################################################################
#!#                         RocketPowerInc Greeter                           ##
#!#############################################################################
printf "\033[0;35mRocketPowerInc Commands:\033[0m \033[0;34ma/goo/go-pwr\033[0m\n"



alias a="go-pwr"

# Function to launch latest go-pwr
function goo() {
    cd "$HOME" || return
    rm -rf go-pwr
    rm -f "$HOME/go/bin/go-pwr"

    git clone https://github.com/rocketpowerinc/go-pwr.git || return
    cd go-pwr || return

    go clean -modcache
    rm -f go.sum
    go mod tidy

    make install || return
    "$HOME/go/bin/go-pwr"
}


#!###############################################################
#!#                       Navigation                           ##
#!###############################################################
printf "\033[0;35mNavigation Commands:\033[0m \033[0;34mhome/hm/~, downloads/dl, desktop/dt, documents/docs, ghub, bin\033[0m\n"


#Home
alias home="cd ~/"
alias hm="cd ~/"
alias ~="cd ~/"

#Downloads
alias downloads="cd ~/Downloads"
alias dl="cd ~/Downloads"

#Desktop
alias desktop="cd ~/Desktop"
alias dt="cd ~/Desktop"

#Documents
alias documents="cd ~/Documents"
alias docs="cd ~/Documents"

#Github
alias ghub="cd ~/Github"

#User Bin
alias bin="cd ~/.local/bin"

#Directory Navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

#!##########################################################
#!#                      Recall                           ##
#!##########################################################
printf "\033[0;35mRecall Commands:\033[0m \033[0;34mshbang, ownership, executable, permission, bash-help\033[0m\n"

alias shbang='echo -e "#!/usr/bin/env bash"'
#Privilege
alias executable='echo -e "chmod +x"'
alias ownership='echo -e "sudo chown $USER foo"'
alias permission='echo -e "chmod 777 foo"' #read write and execute for everyone


#!###############################################################
#!#                       Gum                                  ##
#!###############################################################
printf "\033[0;35mGum Commands:\033[0m \033[0;34mgumls, ghome\033[0m\n"

alias gumls="gum file"
alias ghome='bash $(gum file $HOME)'


#!#####################################################
#!#                       Python                     ##
#!#####################################################
printf "\033[0;35mPython Commands:\033[0m \033[0;34mpyvenv, pyserver, pyserverback, pyserverkill\033[0m\n"

alias pyvenv='python3 -m venv venv && source venv/bin/activate'

#Python Servers
alias pyserver='python3 -m http.server 9999'                #*Starts a python server on port 9999 in pwd
alias pyserverback='nohup python3 -m http.server 9999 &'    #*Starts a python server in the background on port 9999 in pwd and creates a $HOME /nohup.out file
alias pyserverkill='pkill -f "python3 -m http.server 9999"' #*Kills the python server in the background on port 9999



#!###############################################################
#!#                       Github                              ##
#!###############################################################

alias addup='git add -u'
alias addall='git add .'
alias branch='git branch'
alias checkout='git checkout'
alias clone='git clone'
alias commit='git commit -m'
alias fetch='git fetch'
alias pull='git pull origin'
alias push='git push origin'
alias stat='git status' # 'status' is protected name so using 'stat' instead
alias tag='git tag'
alias newtag='git tag -a'

gcom() {
    git add .
    git commit -m "$1"
}
lazyg() {
    git add .
    git commit -m "$1"
    git push
}

#!################################
#!#         Docker-Compose       #
#!################################
printf "\033[0;35mDocker-Compose Commands:\033[0m \033[0;34mdocker{up, down, pull, update, clean, ip}\033[0m\n"

dockerup() {
    sudo docker compose up -d
}

dockerdown() {
    sudo docker compose down
}

dockerpull() {
    sudo docker compose pull
}

dockerupdate() {
    echo "Stopping the Docker Compose services..."
    sudo docker compose down
    echo "Pulling the latest images..."
    sudo docker compose pull
    echo "Starting the Docker Compose services in detached mode..."
    sudo docker compose up -d
    echo "Pruning unused Docker images..."
    sudo docker image prune -af
    echo "Docker Compose services have been updated and cleaned up."
}

dockerclean() {
    sudo docker image prune -af
}

dockerip() {
    containers=$(sudo docker ps -q)
    for container in $containers; do
        info=$(sudo docker inspect --format '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container)
        formatted_info=$(echo $info | sed 's|^/||')
        echo -e "${MAGENTA}${formatted_info}${ENDCOLOR}"
    done
}

alias lzd='lazydocker'


#!################################
#!#           Birthday           #
#!################################

birthday() {
    # Get OS install date from AppleSetupDone (trim after seconds)
    os_install_date=$(/usr/bin/stat -f '%SB' -t '%Y-%m-%d %H:%M:%S' /var/db/.AppleSetupDone)

    # Convert to epoch seconds
    install_epoch=$(date -j -f "%Y-%m-%d %H:%M:%S" "$os_install_date" +%s)
    current_epoch=$(date +%s)

    # Calculate difference in days
    days_difference=$(( (current_epoch - install_epoch) / 86400 ))

    # Print in yellow
    echo -e "\033[0;33mmacOS has been installed for $days_difference days (since $os_install_date)\033[0m"
}
birthday


